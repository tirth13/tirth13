# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DDsYV09DZxnavRqn5scDtoZrbqGvGz3D
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
import random

train=pd.read_csv('train.csv',index_col='ID')
test=pd.read_csv('test.csv',index_col='ID')

train_length=train.shape[0]
test_length=test.shape[0]

train.dtypes()



cleanup_nums={'Applicant_Gender':{'M':1,'F':0},'Manager_Gender':{'M':1,'F':0},'Applicant_Marital_Status':{'S':0,'M':1,'W':2,'D':3},
             'Applicant_Occupation':{'Others':0,'Salaried':1,'Business':2,'Self Employed':3,'Student':4},
             'Applicant_Qualification':{'Others':0,'Class XII':1,'Class X':2,'Graduate':3,'Masters of Business Administration':4,'Associate / Fellow of Institute of Chartered Accountans of India':5,
                                       'Associate/Fellow of Institute of Company Secretories of India':6,'Associate/Fellow of Acturial Society of India':7,'Certified Associateship of Indian Institute of Bankers':8,
                                       'Associate/Fellow of Insurance Institute of India':9,'Professional Qualification in Marketing':10,'Associate/Fellow of Institute of Institute of Costs and Works Accountants of India':11},
              'Manager_Joining_Designation':{'Other':0,'Level 1':1,'Level 2':2,'Level 3':3,'Level 4':4,'Level 5':5,'Level 6':6,'Level 7':7},
              'Manager_Current_Designation':{'Other':0,'Level 1':1,'Level 2':2,'Level 3':3,'Level 4':4,'Level 5':5,'Level 6':6,'Level 7':7},
              'Manager_Status':{'Probation':0,'Confirmation':1}
             }

train.replace(cleanup_nums, inplace=True)

test.replace(cleanup_nums, inplace=True)

train['Applicant_Gender'].value_counts()

train['Manager_Gender'].value_counts()

train['Applicant_Marital_Status'].value_counts()

train['Applicant_Occupation'].value_counts()

train['Applicant_Qualification'].value_counts()

train['Manager_Joining_Designation'].value_counts()

train['Manager_Current_Designation'].value_counts()

train['Manager_Status'].value_counts()

train['Applicant_City_PIN']=train['Applicant_City_PIN'].ffill().bfill()
train['Applicant_Gender']=train['Applicant_Gender'].ffill().bfill()
train['Applicant_BirthDate']=train['Applicant_BirthDate'].ffill().bfill()
train['Applicant_Marital_Status']=train['Applicant_Marital_Status'].ffill().bfill()
train['Applicant_Occupation']=train['Applicant_Occupation'].ffill().bfill()
train['Applicant_Qualification']=train['Applicant_Qualification'].ffill().bfill()
train['Manager_DOJ']=train['Manager_DOJ'].ffill().bfill()
train['Manager_Joining_Designation']=train['Manager_Joining_Designation'].ffill().bfill()
train['Manager_Current_Designation']=train['Manager_Current_Designation'].ffill().bfill()
train['Manager_Grade']=train['Manager_Grade'].ffill().bfill()
train['Manager_Status']=train['Manager_Status'].ffill().bfill()
train['Manager_Gender']=train['Manager_Gender'].ffill().bfill()
train['Manager_DoB']=train['Manager_DoB'].ffill().bfill()
train['Manager_Num_Application']=train['Manager_Num_Application'].ffill().bfill()
train['Manager_Business']=train['Manager_Business'].fillna(np.mean(train['Manager_Business']))
train['Manager_Num_Products']=train['Manager_Num_Products'].ffill().bfill()
train['Manager_Business2']=train['Manager_Business2'].fillna(np.mean(train['Manager_Business2']))
train['Manager_Num_Products2']=train['Manager_Num_Products2'].ffill().bfill()
train['Manager_Num_Coded']=train['Manager_Num_Coded'].ffill().bfill()

test['Applicant_City_PIN']=test['Applicant_City_PIN'].ffill().bfill()
test['Applicant_Gender']=test['Applicant_Gender'].ffill().bfill()
test['Applicant_BirthDate']=test['Applicant_BirthDate'].ffill().bfill()
test['Applicant_Marital_Status']=test['Applicant_Marital_Status'].ffill().bfill()
test['Applicant_Occupation']=test['Applicant_Occupation'].ffill().bfill()
test['Applicant_Qualification']=test['Applicant_Qualification'].ffill().bfill()
test['Manager_DOJ']=test['Manager_DOJ'].ffill().bfill()
test['Manager_Joining_Designation']=test['Manager_Joining_Designation'].ffill().bfill()
test['Manager_Current_Designation']=test['Manager_Current_Designation'].ffill().bfill()
test['Manager_Grade']=test['Manager_Grade'].ffill().bfill()
test['Manager_Status']=test['Manager_Status'].ffill().bfill()
test['Manager_Gender']=test['Manager_Gender'].ffill().bfill()
test['Manager_DoB']=test['Manager_DoB'].ffill().bfill()
test['Manager_Num_Application']=test['Manager_Num_Application'].ffill().bfill()
test['Manager_Business']=test['Manager_Business'].fillna(np.mean(test['Manager_Business']))
test['Manager_Num_Products']=test['Manager_Num_Products'].ffill().bfill()
test['Manager_Business2']=test['Manager_Business2'].fillna(np.mean(test['Manager_Business2']))
test['Manager_Num_Products2']=test['Manager_Num_Products2'].ffill().bfill()
test['Manager_Num_Coded']=test['Manager_Num_Coded'].ffill().bfill()

train.columns[train.isna().any()].tolist()

train.loc[train['Manager_Business']>650000,'Manager_Business']=np.mean(train['Manager_Business'])

plt.boxplot(train['Manager_Business'])

train.loc[train['Manager_Business2']>500000,'Manager_Business2']=np.mean(train['Manager_Business2'])

plt.boxplot(train['Manager_Business2'])

train.head()

test.head()

x_train=train.drop(['Business_Sourced','Application_Receipt_Date','Applicant_BirthDate','Manager_DOJ','Manager_DoB'],axis=1)

y_train=train['Business_Sourced']

x_train.head()

test=test.drop(['Application_Receipt_Date','Applicant_BirthDate','Manager_DOJ','Manager_DoB'],axis=1)

test.head()

from sklearn.tree import DecisionTreeClassifier

logreg=DecisionTreeClassifier(min_samples_split=170)

logreg.fit(x_train,y_train)

pred=logreg.predict(test)

logreg.score(x_train,y_train)

test_Business_Sourced=pred

result={'ID':test.index,'Business_Sourced':pred}
output=pd.DataFrame(result)

output['Business_Sourced'].value_counts()

output.to_csv('sample_submission.csv',index=False)
